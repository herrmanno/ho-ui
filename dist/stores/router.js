var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var Promise = ho.promise.Promise;
var Router = (function (_super) {
    __extends(Router, _super);
    function Router() {
        _super.call(this);
        this.mapping = null;
        this.actions = ['RouterActions'];
        window.onhashchange = this.onHashChange.bind(this);
    }
    Router.prototype.init = function () {
        return ho.promise.Promise.create(this.onHashChange());
    };
    Router.prototype.onStateChangeRequested = function (data) {
        //get requested state
        var state = this.getStateFromName(data.state);
        var url = this.urlFromState(state.url, data.args);
        //current state and args equals requested state and args -> return
        if (this.data &&
            this.data.state &&
            this.data.state.name === data.state &&
            this.equals(this.data.args, data.args) &&
            url === window.location.hash.substr(1)) {
            return;
        }
        //requested state has an redirect property -> call redirect state
        if (!!state.redirect) {
            state = this.getStateFromName(state.redirect);
        }
        var prom = typeof state.before === 'function' ? state.before(data) : Promise.create(undefined);
        prom
            .then(function () {
            //does the state change request comes from extern e.g. url change in browser window ?
            var extern = !!data.extern;
            this.data = {
                state: state,
                args: data.args,
                extern: extern,
            };
            //------- set url for browser
            var url = this.urlFromState(state.url, data.args);
            this.setUrl(url);
            this.changed();
        }.bind(this), function (data) {
            this.onStateChangeRequested(data);
        }.bind(this));
    };
    Router.prototype.onHashChange = function () {
        var s = this.stateFromUrl(window.location.hash.substr(1));
        var data = {
            state: s.state,
            args: s.args,
            extern: true
        };
        ho.flux.ACTIONS.get(RouterActions).go(data);
    };
    Router.prototype.setUrl = function (url) {
        if (window.location.hash.substr(1) === url)
            return;
        var l = window.onhashchange;
        window.onhashchange = null;
        window.location.hash = url;
        window.onhashchange = l;
    };
    Router.prototype.getStateFromName = function (name) {
        return this.mapping.filter(function (s) {
            return s.name === name;
        })[0];
    };
    Router.prototype.regexFromUrl = function (url) {
        var regex = /:([\w]+)/;
        while (url.match(regex)) {
            url = url.replace(regex, "([^\/]+)");
        }
        return url + '$';
    };
    Router.prototype.argsFromUrl = function (pattern, url) {
        var r = this.regexFromUrl(pattern);
        var names = pattern.match(r).slice(1);
        var values = url.match(r).slice(1);
        var args = {};
        names.forEach(function (name, i) {
            args[name.substr(1)] = values[i];
        });
        return args;
    };
    Router.prototype.stateFromUrl = function (url) {
        var _this = this;
        var s = void 0;
        this.mapping.forEach(function (state) {
            if (s)
                return;
            var r = _this.regexFromUrl(state.url);
            if (url.match(r)) {
                var args = _this.argsFromUrl(state.url, url);
                s = {
                    "state": state.name,
                    "args": args,
                    "extern": false
                };
            }
        });
        if (!s)
            throw "No State found for url " + url;
        return s;
    };
    Router.prototype.urlFromState = function (url, args) {
        var regex = /:([\w]+)/;
        while (url.match(regex)) {
            url = url.replace(regex, function (m) {
                return args[m.substr(1)];
            });
        }
        return url;
    };
    Router.prototype.equals = function (o1, o2) {
        return JSON.stringify(o1) === JSON.stringify(o2);
    };
    Object.defineProperty(Router.prototype, "onStateChangeRequested",
        __decorate([
            ho.flux.Store.on('STATE')
        ], Router.prototype, "onStateChangeRequested", Object.getOwnPropertyDescriptor(Router.prototype, "onStateChangeRequested")));
    return Router;
})(ho.flux.Store);

//# sourceMappingURL=data:application/json;base64,