/// <reference path="../../../../bower_components/ho-promise/dist/promise.d.ts"/>
/// <reference path="../../../../bower_components/ho-components/dist/components.d.ts"/>
/// <reference path="../../../../bower_components/ho-flux/dist/flux.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.apply(this, arguments);
        this.html = "";
        this.properties = [
            { name: 'viewname', required: true }
        ];
    }
    View.prototype.init = function () {
        ho.flux.STORES.get(ho.flux.Router).register(this.state_changed, this);
    };
    Object.defineProperty(View.prototype, "viewname", {
        get: function () {
            return this.properties['viewname'];
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.state_changed = function (data) {
        var _this = this;
        var html = null;
        try {
            html = data.state.view.filter(function (v) {
                return v.name === _this.viewname;
            })[0].html;
        }
        catch (e) {
            html = null;
        }
        this.getHtml(html)
            .then(function (h) {
            html = h;
            return this.loadDynamicRequirements(html);
        }.bind(this))
            .then(function () {
            this.html = false;
            this.element.innerHTML = html;
            this.render();
        }.bind(this));
    };
    View.prototype.getHtml = function (html) {
        if (typeof html === 'undefined')
            return ho.promise.Promise.create(null);
        else if (html.slice(-5) !== '.html')
            return ho.promise.Promise.create(html);
        else
            return new ho.promise.Promise(function (resolve, reject) {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    if (xmlhttp.readyState == 4) {
                        var resp = xmlhttp.responseText;
                        if (xmlhttp.status == 200) {
                            resolve(resp);
                        }
                        else {
                            reject(resp);
                        }
                    }
                };
                xmlhttp.open('GET', html, true);
                xmlhttp.send();
            });
    };
    View.prototype.loadDynamicRequirements = function (html) {
        return ho.promise.Promise.all([this.loadDynamicComponents(html), this.loadDynamicAttributes(html)]);
    };
    View.prototype.loadDynamicComponents = function (html) {
        var requirements = html.match(/<!--\s*requires?="(.+)"/);
        if (requirements !== null)
            requirements = requirements[1].split(",").map(function (r) { return r.trim(); });
        else
            requirements = [];
        var Registry = ho.components.registry.instance;
        var promises = requirements
            .filter(function (req) {
            return !Registry.hasComponent(req);
        })
            .map(function (req) {
            return Registry.loadComponent(req);
        });
        return ho.promise.Promise.all(promises);
    };
    View.prototype.loadDynamicAttributes = function (html) {
        var attributes = html.match(/<!--\s*attributes?="(.+)"/);
        if (attributes !== null)
            attributes = attributes[1].split(",").map(function (a) { return a.trim(); });
        else
            attributes = [];
        var Registry = ho.components.registry.instance;
        var promises = attributes
            .filter(function (attr) {
            return !Registry.hasAttribute(attr);
        })
            .map(function (attr) {
            return Registry.loadAttribute(attr);
        });
        return ho.promise.Promise.all(promises);
    };
    return View;
})(ho.components.Component);

//# sourceMappingURL=data:application/json;base64,