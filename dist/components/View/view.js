/// <reference path="../../../../bower_components/ho-promise/dist/promise.d.ts"/>
/// <reference path="../../../../bower_components/ho-components/dist/components.d.ts"/>
/// <reference path="../../../../bower_components/ho-flux/dist/flux.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.apply(this, arguments);
        this.html = "";
        this.properties = [
            { name: 'viewname', required: true }
        ];
    }
    View.prototype.init = function () {
        ho.flux.STORES.get(ho.flux.Router).register(this.state_changed, this);
    };
    Object.defineProperty(View.prototype, "viewname", {
        get: function () {
            return this.properties['viewname'];
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.state_changed = function (data) {
        var _this = this;
        var html;
        var state = data.state.view.filter(function (v) {
            return v.name === _this.viewname;
        })[0];
        if (state && state.html)
            html = state.html;
        else
            return;
        this.getHtml(html)
            .then(function (h) {
            html = h;
            return this.loadDynamicRequirements(html);
        }.bind(this))
            .then(function () {
            this.html = false;
            this.element.innerHTML = html;
            this.render();
        }.bind(this));
    };
    View.prototype.getHtml = function (html) {
        if (typeof html === 'undefined')
            return ho.promise.Promise.create(null);
        else if (html.slice(-5) !== '.html')
            return ho.promise.Promise.create(html);
        else
            return new ho.promise.Promise(function (resolve, reject) {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    if (xmlhttp.readyState == 4) {
                        var resp = xmlhttp.responseText;
                        if (xmlhttp.status == 200) {
                            resolve(resp);
                        }
                        else {
                            reject(resp);
                        }
                    }
                };
                xmlhttp.open('GET', html, true);
                xmlhttp.send();
            });
    };
    View.prototype.loadDynamicRequirements = function (html) {
        return ho.promise.Promise.all([this.loadDynamicComponents(html), this.loadDynamicAttributes(html)]);
    };
    View.prototype.loadDynamicComponents = function (html) {
        var requirements = html.match(/<!--\s*requires?="(.+)"/);
        if (requirements !== null)
            requirements = requirements[1].split(",").map(function (r) { return r.trim(); });
        else
            requirements = [];
        var Registry = ho.components.registry.instance;
        var promises = requirements
            .filter(function (req) {
            return !Registry.hasComponent(req);
        })
            .map(function (req) {
            return Registry.loadComponent(req);
        });
        return ho.promise.Promise.all(promises);
    };
    View.prototype.loadDynamicAttributes = function (html) {
        var attributes = html.match(/<!--\s*attributes?="(.+)"/);
        if (attributes !== null)
            attributes = attributes[1].split(",").map(function (a) { return a.trim(); });
        else
            attributes = [];
        var Registry = ho.components.registry.instance;
        var promises = attributes
            .filter(function (attr) {
            return !Registry.hasAttribute(attr);
        })
            .map(function (attr) {
            return Registry.loadAttribute(attr);
        });
        return ho.promise.Promise.all(promises);
    };
    return View;
})(ho.components.Component);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvVmlldy92aWV3LnRzIl0sIm5hbWVzIjpbIlZpZXciLCJWaWV3LmNvbnN0cnVjdG9yIiwiVmlldy5pbml0IiwiVmlldy52aWV3bmFtZSIsIlZpZXcuc3RhdGVfY2hhbmdlZCIsIlZpZXcuZ2V0SHRtbCIsIlZpZXcubG9hZER5bmFtaWNSZXF1aXJlbWVudHMiLCJWaWV3LmxvYWREeW5hbWljQ29tcG9uZW50cyIsIlZpZXcubG9hZER5bmFtaWNBdHRyaWJ1dGVzIl0sIm1hcHBpbmdzIjoiQUFBQSxpRkFBaUY7QUFDakYsdUZBQXVGO0FBQ3ZGLDJFQUEyRTs7Ozs7OztBQUUzRTtJQUFtQkEsd0JBQXVCQTtJQUExQ0E7UUFBbUJDLDhCQUF1QkE7UUFFekNBLFNBQUlBLEdBQUdBLEVBQUVBLENBQUNBO1FBRVZBLGVBQVVBLEdBQUdBO1lBQ1pBLEVBQUVBLElBQUlBLEVBQUVBLFVBQVVBLEVBQUVBLFFBQVFBLEVBQUVBLElBQUlBLEVBQUVBO1NBQ3BDQSxDQUFDQTtJQW9HSEEsQ0FBQ0E7SUFsR0FELG1CQUFJQSxHQUFKQTtRQUNDRSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUN2RUEsQ0FBQ0E7SUFFREYsc0JBQUlBLDBCQUFRQTthQUFaQTtZQUNDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUNwQ0EsQ0FBQ0E7OztPQUFBSDtJQUVVQSw0QkFBYUEsR0FBdkJBLFVBQXdCQSxJQUF5QkE7UUFBakRJLGlCQW9CQUE7UUFuQkdBLElBQUlBLElBQVlBLENBQUNBO1FBQ3BCQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxN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ZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2hvLXByb21pc2UvZGlzdC9wcm9taXNlLmQudHNcIi8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2hvLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzLmQudHNcIi8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi8uLi8uLi9ib3dlcl9jb21wb25lbnRzL2hvLWZsdXgvZGlzdC9mbHV4LmQudHNcIi8+XHJcblxyXG5jbGFzcyBWaWV3IGV4dGVuZHMgaG8uY29tcG9uZW50cy5Db21wb25lbnQge1xyXG5cclxuXHRodG1sID0gXCJcIjtcclxuXHJcblx0cHJvcGVydGllcyA9IFtcclxuXHRcdHsgbmFtZTogJ3ZpZXduYW1lJywgcmVxdWlyZWQ6IHRydWUgfVxyXG5cdF07XHJcblxyXG5cdGluaXQoKSB7XHJcblx0XHRoby5mbHV4LlNUT1JFUy5nZXQoaG8uZmx1eC5Sb3V0ZXIpLnJlZ2lzdGVyKHRoaXMuc3RhdGVfY2hhbmdlZCwgdGhpcyk7XHJcblx0fVxyXG5cclxuXHRnZXQgdmlld25hbWUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5wcm9wZXJ0aWVzWyd2aWV3bmFtZSddO1xyXG5cdH1cclxuXHJcblx0XHRwcm90ZWN0ZWQgc3RhdGVfY2hhbmdlZChkYXRhOiBoby5mbHV4LklSb3V0ZXJEYXRhKTogdm9pZCB7XHJcblx0ICAgIGxldCBodG1sOiBzdHJpbmc7XHJcblx0XHRsZXQgc3RhdGUgPSBkYXRhLnN0YXRlLnZpZXcuZmlsdGVyKCh2KSA9PiB7XHJcbiAgICAgIFx0XHRyZXR1cm4gdi5uYW1lID09PSB0aGlzLnZpZXduYW1lO1xyXG5cdCAgICB9KVswXTtcclxuXHRcdGlmKHN0YXRlICYmIHN0YXRlLmh0bWwpXHJcblx0XHRcdGh0bWwgPSBzdGF0ZS5odG1sO1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdCAgICB0aGlzLmdldEh0bWwoaHRtbClcclxuICBcdFx0LnRoZW4oZnVuY3Rpb24oaCkge1xyXG5cdCAgICAgIFx0aHRtbCA9IGg7XHJcblx0ICAgICAgXHRyZXR1cm4gdGhpcy5sb2FkRHluYW1pY1JlcXVpcmVtZW50cyhodG1sKTtcclxuXHQgICAgfS5iaW5kKHRoaXMpKVxyXG4gICAgICBcdC50aGVuKGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgIFx0dGhpcy5odG1sID0gZmFsc2U7XHJcblx0ICAgICAgXHR0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcclxuXHQgICAgICBcdHRoaXMucmVuZGVyKCk7XHJcblx0ICAgIH0uYmluZCh0aGlzKSk7XHJcblx0fVxyXG5cclxuXHRcdHByb3RlY3RlZCBnZXRIdG1sKGh0bWw6IHN0cmluZyk6IGhvLnByb21pc2UuUHJvbWlzZTxzdHJpbmcsIHN0cmluZz4ge1xyXG5cdFx0aWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJylcclxuXHQgICAgICBcdHJldHVybiBoby5wcm9taXNlLlByb21pc2UuY3JlYXRlKG51bGwpO1xyXG5cdCAgICBlbHNlIGlmIChodG1sLnNsaWNlKC01KSAhPT0gJy5odG1sJylcclxuXHQgICAgICBcdHJldHVybiBoby5wcm9taXNlLlByb21pc2UuY3JlYXRlKGh0bWwpO1xyXG5cdCAgICBlbHNlIHJldHVybiBuZXcgaG8ucHJvbWlzZS5Qcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcblx0ICAgICAgXHRsZXQgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdCAgICAgIFx0eG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgIFx0aWYgKHhtbGh0dHAucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0XHQgICAgICAgICAgXHR2YXIgcmVzcCA9IHhtbGh0dHAucmVzcG9uc2VUZXh0O1xyXG5cdFx0ICAgICAgICAgIFx0aWYgKHhtbGh0dHAuc3RhdHVzID09IDIwMCkge1xyXG5cdFx0ICAgICAgICAgICAgXHRyZXNvbHZlKHJlc3ApO1xyXG5cdFx0ICAgICAgICAgIFx0fSBlbHNlIHtcclxuXHRcdCAgICAgICAgICAgIFx0cmVqZWN0KHJlc3ApO1xyXG5cdFx0ICAgICAgICAgIFx0fVxyXG5cdCAgICAgICAgXHR9XHJcblx0ICAgICAgXHR9O1xyXG5cclxuXHQgICAgICBcdHhtbGh0dHAub3BlbignR0VUJywgaHRtbCwgdHJ1ZSk7XHJcblx0ICAgICAgXHR4bWxodHRwLnNlbmQoKTtcclxuXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBsb2FkRHluYW1pY1JlcXVpcmVtZW50cyhodG1sOiBzdHJpbmcpOiBoby5wcm9taXNlLlByb21pc2U8YW55LCBhbnk+IHtcclxuXHRcdHJldHVybiBoby5wcm9taXNlLlByb21pc2UuYWxsKFt0aGlzLmxvYWREeW5hbWljQ29tcG9uZW50cyhodG1sKSwgdGhpcy5sb2FkRHluYW1pY0F0dHJpYnV0ZXMoaHRtbCldKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBsb2FkRHluYW1pY0NvbXBvbmVudHMoaHRtbDogc3RyaW5nKTogaG8ucHJvbWlzZS5Qcm9taXNlPHN0cmluZywgc3RyaW5nPiB7XHJcblx0ICAgIGxldCByZXF1aXJlbWVudHMgPSBodG1sLm1hdGNoKC88IS0tXFxzKnJlcXVpcmVzPz1cIiguKylcIi8pO1xyXG5cdCAgICBpZiAocmVxdWlyZW1lbnRzICE9PSBudWxsKVxyXG5cdCAgICAgIFx0cmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzWzFdLnNwbGl0KFwiLFwiKS5tYXAoKHIpID0+IHsgcmV0dXJuIHIudHJpbSgpIH0pO1xyXG5cdCAgICBlbHNlXHJcblx0ICAgICAgXHRyZXF1aXJlbWVudHMgPSBbXTtcclxuXHJcblx0ICAgIGxldCBSZWdpc3RyeSA9IGhvLmNvbXBvbmVudHMucmVnaXN0cnkuaW5zdGFuY2U7XHJcblxyXG5cdCAgICBsZXQgcHJvbWlzZXMgPSByZXF1aXJlbWVudHNcclxuICAgICAgXHQuZmlsdGVyKChyZXEpID0+IHtcclxuXHQgICAgICBcdHJldHVybiAhUmVnaXN0cnkuaGFzQ29tcG9uZW50KHJlcSk7XHJcblx0ICAgIH0pXHJcblx0ICAgIC5tYXAoKHJlcSkgPT4ge1xyXG5cdCAgICBcdHJldHVybiBSZWdpc3RyeS5sb2FkQ29tcG9uZW50KHJlcSk7XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgcmV0dXJuIGhvLnByb21pc2UuUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG5cdH1cclxuXHJcblx0cHJvdGVjdGVkIGxvYWREeW5hbWljQXR0cmlidXRlcyhodG1sOiBzdHJpbmcpOiBoby5wcm9taXNlLlByb21pc2U8c3RyaW5nLCBzdHJpbmc+IHtcclxuXHQgICAgbGV0IGF0dHJpYnV0ZXMgPSBodG1sLm1hdGNoKC88IS0tXFxzKmF0dHJpYnV0ZXM/PVwiKC4rKVwiLyk7XHJcblx0ICAgIGlmIChhdHRyaWJ1dGVzICE9PSBudWxsKVxyXG5cdCAgICAgIFx0YXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNbMV0uc3BsaXQoXCIsXCIpLm1hcCgoYSkgPT4geyByZXR1cm4gYS50cmltKCkgfSk7XHJcblx0ICAgIGVsc2VcclxuXHQgICAgICBcdGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcblx0ICAgIGxldCBSZWdpc3RyeSA9IGhvLmNvbXBvbmVudHMucmVnaXN0cnkuaW5zdGFuY2U7XHJcblxyXG5cdCAgICBsZXQgcHJvbWlzZXMgPSBhdHRyaWJ1dGVzXHJcbiAgICAgIFx0LmZpbHRlcigoYXR0cikgPT4ge1xyXG5cdCAgICAgIFx0cmV0dXJuICFSZWdpc3RyeS5oYXNBdHRyaWJ1dGUoYXR0cik7XHJcblx0ICAgIH0pXHJcblx0ICAgIC5tYXAoKGF0dHIpID0+IHtcclxuXHQgICAgXHRyZXR1cm4gUmVnaXN0cnkubG9hZEF0dHJpYnV0ZShhdHRyKTtcclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICByZXR1cm4gaG8ucHJvbWlzZS5Qcm9taXNlLmFsbChwcm9taXNlcyk7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==