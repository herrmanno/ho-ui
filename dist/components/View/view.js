/// <reference path="../../../../bower_components/ho-promise/dist/promise.d.ts"/>
/// <reference path="../../../../bower_components/ho-components/dist/components.d.ts"/>
/// <reference path="../../../../bower_components/ho-flux/dist/flux.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var View = (function (_super) {
    __extends(View, _super);
    function View() {
        _super.apply(this, arguments);
        this.html = "";
        this.properties = [
            { name: 'viewname', required: true }
        ];
    }
    View.prototype.init = function () {
        ho.flux.STORES.get(ho.flux.Router).register(this.state_changed, this);
    };
    Object.defineProperty(View.prototype, "viewname", {
        get: function () {
            return this.properties['viewname'];
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.state_changed = function (data) {
        var state = this.getState(data);
        if (!!state.component)
            this.renderComponent(state.component);
        else
            this.renderHTML(state.html);
    };
    View.prototype.renderComponent = function (component) {
        var registry = ho.components.registry.instance;
        registry.loadComponent(component)
            .then(function () {
            this.html = false;
            this.element.innerHTML = '<' + component + ' />';
            this.render();
        }.bind(this));
    };
    View.prototype.renderHTML = function (html) {
        this.getHtml(html)
            .then(function (h) {
            html = h;
            return this.loadDynamicRequirements(html);
        }.bind(this))
            .then(function () {
            this.html = false;
            this.element.innerHTML = html;
            this.render();
        }.bind(this));
    };
    View.prototype.getState = function (data) {
        var _this = this;
        var view = data.state.view.filter(function (v) {
            return v.name === _this.viewname;
        })[0];
        return view;
    };
    View.prototype.getHtml = function (html) {
        if (typeof html === 'undefined')
            return ho.promise.Promise.create(null);
        else if (html.slice(-5) !== '.html')
            return ho.promise.Promise.create(html);
        else
            return new ho.promise.Promise(function (resolve, reject) {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    if (xmlhttp.readyState == 4) {
                        var resp = xmlhttp.responseText;
                        if (xmlhttp.status == 200) {
                            resolve(resp);
                        }
                        else {
                            reject(resp);
                        }
                    }
                };
                xmlhttp.open('GET', html, true);
                xmlhttp.send();
            });
    };
    View.prototype.loadDynamicRequirements = function (html) {
        return ho.promise.Promise.all([this.loadDynamicComponents(html), this.loadDynamicAttributes(html)]);
    };
    View.prototype.loadDynamicComponents = function (html) {
        var requirements = html.match(/<!--\s*requires?="(.+)"/);
        if (requirements !== null)
            requirements = requirements[1].split(",").map(function (r) { return r.trim(); });
        else
            requirements = [];
        var Registry = ho.components.registry.instance;
        var promises = requirements
            .filter(function (req) {
            return !Registry.hasComponent(req);
        })
            .map(function (req) {
            return Registry.loadComponent(req);
        });
        return ho.promise.Promise.all(promises);
    };
    View.prototype.loadDynamicAttributes = function (html) {
        var attributes = html.match(/<!--\s*attributes?="(.+)"/);
        if (attributes !== null)
            attributes = attributes[1].split(",").map(function (a) { return a.trim(); });
        else
            attributes = [];
        var Registry = ho.components.registry.instance;
        var promises = attributes
            .filter(function (attr) {
            return !Registry.hasAttribute(attr);
        })
            .map(function (attr) {
            return Registry.loadAttribute(attr);
        });
        return ho.promise.Promise.all(promises);
    };
    return View;
})(ho.components.Component);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvVmlldy92aWV3LnRzIl0sIm5hbWVzIjpbIlZpZXciLCJWaWV3LmNvbnN0cnVjdG9yIiwiVmlldy5pbml0IiwiVmlldy52aWV3bmFtZSIsIlZpZXcuc3RhdGVfY2hhbmdlZCIsIlZpZXcucmVuZGVyQ29tcG9uZW50IiwiVmlldy5yZW5kZXJIVE1MIiwiVmlldy5nZXRTdGF0ZSIsIlZpZXcuZ2V0SHRtbCIsIlZpZXcubG9hZER5bmFtaWNSZXF1aXJlbWVudHMiLCJWaWV3LmxvYWREeW5hbWljQ29tcG9uZW50cyIsIlZpZXcubG9hZER5bmFtaWNBdHRyaWJ1dGVzIl0sIm1hcHBpbmdzIjoiQUFBQSxpRkFBaUY7QUFDakYsdUZBQXVGO0FBQ3ZGLDJFQUEyRTs7Ozs7OztBQUUzRTtJQUFtQkEsd0JBQXVCQTtJQUExQ0E7UUFBbUJDLDhCQUF1QkE7UUFFekNBLFNBQUlBLEdBQUdBLEVBQUVBLENBQUNBO1FBRVZBLGVBQVVBLEdBQUdBO1lBQ1pBLEVBQUVBLElBQUlBLEVBQUVBLFVBQVVBLEVBQUVBLFFBQVFBLEVBQUVBLElBQUlBLEVBQUVBO1NBQ3BDQSxDQUFDQTtJQXNISEEsQ0FBQ0E7SUFwSEFELG1CQUFJQSxHQUFKQTtRQUNDRSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUN2RUEsQ0FBQ0E7SUFFREYsc0JBQUlBLDBCQUFRQTthQUFaQTtZQUNDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUNwQ0EsQ0FBQ0E7OztPQUFBSDtJQUVTQSw0QkFBYUEsR0FBdkJBLFVBQXdCQSxJQUF5QkE7UUFDaERJLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENB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QUlBLEVBQUVBLENBQUFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3pFQSxJQUFJQTtZQUNEQSxVQUFVQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUVuQkEsSUFBSUEsUUFBUUEsR0FBR0EsRUFBRUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFFL0NBLElBQUlBLFFBQVFBLEdBQUdBLFVBQVVBO2FBQ3RCQSxNQUFNQSxDQUFDQSxVQUFDQSxJQUFJQTtZQUNaQSxNQUFNQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN2Q0EsQ0FBQ0EsQ0FBQ0E7YUFDREEsR0FBR0EsQ0FBQ0EsVUFBQ0EsSUFBSUE7WUFDVEEsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDckNBLENBQUNBLENBQUNBLENBQUNBO1FBRUhBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQzVDQSxDQUFDQTtJQUNGWCxXQUFDQTtBQUFEQSxDQTVIQSxBQTRIQ0EsRUE1SGtCLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQTRIekMiLCJmaWxlIjoiY29tcG9uZW50cy9WaWV3L3ZpZXcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9oby1wcm9taXNlL2Rpc3QvcHJvbWlzZS5kLnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9oby1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy5kLnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vLi4vYm93ZXJfY29tcG9uZW50cy9oby1mbHV4L2Rpc3QvZmx1eC5kLnRzXCIvPlxyXG5cclxuY2xhc3MgVmlldyBleHRlbmRzIGhvLmNvbXBvbmVudHMuQ29tcG9uZW50IHtcclxuXHJcblx0aHRtbCA9IFwiXCI7XHJcblxyXG5cdHByb3BlcnRpZXMgPSBbXHJcblx0XHR7IG5hbWU6ICd2aWV3bmFtZScsIHJlcXVpcmVkOiB0cnVlIH1cclxuXHRdO1xyXG5cclxuXHRpbml0KCkge1xyXG5cdFx0aG8uZmx1eC5TVE9SRVMuZ2V0KGhvLmZsdXguUm91dGVyKS5yZWdpc3Rlcih0aGlzLnN0YXRlX2NoYW5nZWQsIHRoaXMpO1xyXG5cdH1cclxuXHJcblx0Z2V0IHZpZXduYW1lKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucHJvcGVydGllc1sndmlld25hbWUnXTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBzdGF0ZV9jaGFuZ2VkKGRhdGE6IGhvLmZsdXguSVJvdXRlckRhdGEpOiB2b2lkIHtcclxuXHRcdGxldCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoZGF0YSk7XHJcblx0XHRpZighIXN0YXRlLmNvbXBvbmVudClcclxuXHRcdFx0dGhpcy5yZW5kZXJDb21wb25lbnQoc3RhdGUuY29tcG9uZW50KTtcclxuXHRcdGVsc2VcclxuXHRcdFx0dGhpcy5yZW5kZXJIVE1MKHN0YXRlLmh0bWwpO1xyXG5cdH1cclxuXHJcblx0cHJvdGVjdGVkIHJlbmRlckNvbXBvbmVudChjb21wb25lbnQ6IHN0cmluZykge1xyXG5cdFx0bGV0IHJlZ2lzdHJ5ID0gaG8uY29tcG9uZW50cy5yZWdpc3RyeS5pbnN0YW5jZTtcclxuXHJcblx0XHRyZWdpc3RyeS5sb2FkQ29tcG9uZW50KGNvbXBvbmVudClcclxuXHRcdC50aGVuKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmh0bWwgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5lbGVtZW50LmlubmVySFRNTCA9ICc8JyArIGNvbXBvbmVudCArICcgLz4nO1xyXG5cdFx0XHR0aGlzLnJlbmRlcigpO1xyXG5cdFx0fS5iaW5kKHRoaXMpKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCByZW5kZXJIVE1MKGh0bWw6IHN0cmluZyk6IHZvaWQge1xyXG5cdCAgICB0aGlzLmdldEh0bWwoaHRtbClcclxuICBcdFx0LnRoZW4oZnVuY3Rpb24oaCkge1xyXG5cdCAgICAgIFx0aHRtbCA9IGg7XHJcblx0ICAgICAgXHRyZXR1cm4gdGhpcy5sb2FkRHluYW1pY1JlcXVpcmVtZW50cyhodG1sKTtcclxuXHQgICAgfS5iaW5kKHRoaXMpKVxyXG4gICAgICBcdC50aGVuKGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgIFx0dGhpcy5odG1sID0gZmFsc2U7XHJcblx0ICAgICAgXHR0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcclxuXHQgICAgICBcdHRoaXMucmVuZGVyKCk7XHJcblx0ICAgIH0uYmluZCh0aGlzKSk7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgZ2V0U3RhdGUoZGF0YTogSVJvdXRlckRhdGEpOiBJVmlld1N0YXRlIHtcclxuXHRcdGxldCB2aWV3ID0gZGF0YS5zdGF0ZS52aWV3LmZpbHRlcigodikgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdi5uYW1lID09PSB0aGlzLnZpZXduYW1lO1xyXG5cdFx0fSlbMF1cclxuXHJcblx0XHRyZXR1cm4gdmlldztcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBnZXRIdG1sKGh0bWw6IHN0cmluZyk6IGhvLnByb21pc2UuUHJvbWlzZTxzdHJpbmcsIHN0cmluZz4ge1xyXG5cdFx0aWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJylcclxuXHQgICAgICBcdHJldHVybiBoby5wcm9taXNlLlByb21pc2UuY3JlYXRlKG51bGwpO1xyXG5cdCAgICBlbHNlIGlmIChodG1sLnNsaWNlKC01KSAhPT0gJy5odG1sJylcclxuXHQgICAgICBcdHJldHVybiBoby5wcm9taXNlLlByb21pc2UuY3JlYXRlKGh0bWwpO1xyXG5cdCAgICBlbHNlIHJldHVybiBuZXcgaG8ucHJvbWlzZS5Qcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcblx0ICAgICAgXHRsZXQgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdCAgICAgIFx0eG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgIFx0aWYgKHhtbGh0dHAucmVhZHlTdGF0ZSA9PSA0KSB7XHJcblx0XHQgICAgICAgICAgXHR2YXIgcmVzcCA9IHhtbGh0dHAucmVzcG9uc2VUZXh0O1xyXG5cdFx0ICAgICAgICAgIFx0aWYgKHhtbGh0dHAuc3RhdHVzID09IDIwMCkge1xyXG5cdFx0ICAgICAgICAgICAgXHRyZXNvbHZlKHJlc3ApO1xyXG5cdFx0ICAgICAgICAgIFx0fSBlbHNlIHtcclxuXHRcdCAgICAgICAgICAgIFx0cmVqZWN0KHJlc3ApO1xyXG5cdFx0ICAgICAgICAgIFx0fVxyXG5cdCAgICAgICAgXHR9XHJcblx0ICAgICAgXHR9O1xyXG5cclxuXHQgICAgICBcdHhtbGh0dHAub3BlbignR0VUJywgaHRtbCwgdHJ1ZSk7XHJcblx0ICAgICAgXHR4bWxodHRwLnNlbmQoKTtcclxuXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBsb2FkRHluYW1pY1JlcXVpcmVtZW50cyhodG1sOiBzdHJpbmcpOiBoby5wcm9taXNlLlByb21pc2U8YW55LCBhbnk+IHtcclxuXHRcdHJldHVybiBoby5wcm9taXNlLlByb21pc2UuYWxsKFt0aGlzLmxvYWREeW5hbWljQ29tcG9uZW50cyhodG1sKSwgdGhpcy5sb2FkRHluYW1pY0F0dHJpYnV0ZXMoaHRtbCldKTtcclxuXHR9XHJcblxyXG5cdHByb3RlY3RlZCBsb2FkRHluYW1pY0NvbXBvbmVudHMoaHRtbDogc3RyaW5nKTogaG8ucHJvbWlzZS5Qcm9taXNlPHN0cmluZywgc3RyaW5nPiB7XHJcblx0ICAgIGxldCByZXF1aXJlbWVudHMgPSBodG1sLm1hdGNoKC88IS0tXFxzKnJlcXVpcmVzPz1cIiguKylcIi8pO1xyXG5cdCAgICBpZiAocmVxdWlyZW1lbnRzICE9PSBudWxsKVxyXG5cdCAgICAgIFx0cmVxdWlyZW1lbnRzID0gcmVxdWlyZW1lbnRzWzFdLnNwbGl0KFwiLFwiKS5tYXAoKHIpID0+IHsgcmV0dXJuIHIudHJpbSgpIH0pO1xyXG5cdCAgICBlbHNlXHJcblx0ICAgICAgXHRyZXF1aXJlbWVudHMgPSBbXTtcclxuXHJcblx0ICAgIGxldCBSZWdpc3RyeSA9IGhvLmNvbXBvbmVudHMucmVnaXN0cnkuaW5zdGFuY2U7XHJcblxyXG5cdCAgICBsZXQgcHJvbWlzZXMgPSByZXF1aXJlbWVudHNcclxuICAgICAgXHQuZmlsdGVyKChyZXEpID0+IHtcclxuXHQgICAgICBcdHJldHVybiAhUmVnaXN0cnkuaGFzQ29tcG9uZW50KHJlcSk7XHJcblx0ICAgIH0pXHJcblx0ICAgIC5tYXAoKHJlcSkgPT4ge1xyXG5cdCAgICBcdHJldHVybiBSZWdpc3RyeS5sb2FkQ29tcG9uZW50KHJlcSk7XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgcmV0dXJuIGhvLnByb21pc2UuUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG5cdH1cclxuXHJcblx0cHJvdGVjdGVkIGxvYWREeW5hbWljQXR0cmlidXRlcyhodG1sOiBzdHJpbmcpOiBoby5wcm9taXNlLlByb21pc2U8c3RyaW5nLCBzdHJpbmc+IHtcclxuXHQgICAgbGV0IGF0dHJpYnV0ZXMgPSBodG1sLm1hdGNoKC88IS0tXFxzKmF0dHJpYnV0ZXM/PVwiKC4rKVwiLyk7XHJcblx0ICAgIGlmIChhdHRyaWJ1dGVzICE9PSBudWxsKVxyXG5cdCAgICAgIFx0YXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNbMV0uc3BsaXQoXCIsXCIpLm1hcCgoYSkgPT4geyByZXR1cm4gYS50cmltKCkgfSk7XHJcblx0ICAgIGVsc2VcclxuXHQgICAgICBcdGF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcblx0ICAgIGxldCBSZWdpc3RyeSA9IGhvLmNvbXBvbmVudHMucmVnaXN0cnkuaW5zdGFuY2U7XHJcblxyXG5cdCAgICBsZXQgcHJvbWlzZXMgPSBhdHRyaWJ1dGVzXHJcbiAgICAgIFx0LmZpbHRlcigoYXR0cikgPT4ge1xyXG5cdCAgICAgIFx0cmV0dXJuICFSZWdpc3RyeS5oYXNBdHRyaWJ1dGUoYXR0cik7XHJcblx0ICAgIH0pXHJcblx0ICAgIC5tYXAoKGF0dHIpID0+IHtcclxuXHQgICAgXHRyZXR1cm4gUmVnaXN0cnkubG9hZEF0dHJpYnV0ZShhdHRyKTtcclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICByZXR1cm4gaG8ucHJvbWlzZS5Qcm9taXNlLmFsbChwcm9taXNlcyk7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==